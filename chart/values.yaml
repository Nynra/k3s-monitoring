global:
  commonLabels: {}
  commonAnnotations: {}

enabled: true

# This chart does not use the ingress provided by the kube-prometheus-stack chart.
# Instead the ingress and certs are provided in the templates of this chart.
cert:
  externalSecret:
    enabled: false
    secretName: "grafana-example-com-tls"
    secretStore: "kubernetes"
    secretStoreType: "ClusterSecretStore"
  reflectedSecret:
    enabled: true
    originNamespace: "cert-manager"
    originSecretName: "grafana-example-com-tls"

grafanaIngress:
  enabled: false
  ingressUrl: "grafana.example.com"
  middlewares: 
    - name: traefik-default-chain
      namespace: traefik

prometheusIngress:
  enabled: false
  ingressUrl: "prometheus.example.com"
  middlewares: 
    - name: traefik-default-chain
      namespace: traefik

# https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
grafana: 
  enabled: true 
  replicas: 1

  downloadDashboards:
    env: {}
    envFromSecret: ""
    resources: {}
    envValueFrom: {}
    #  ENV_NAME:
    #    configMapKeyRef:
    #      name: configmap-name
    #      key: value_key

  deploymentStrategy:
    type: Recreate

  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
      labelValue: "1"
      defaultFolderName: provisioned

  service:
    enabled: true
    type: ClusterIP
    loadBalancerIP: ""

  service-monitor:
    enabled: false

  ingress:
    enabled: false

  resources: {}
  #  limits:
  #    cpu: 100m
  #    memory: 128Mi
  #  requests:
  #    cpu: 100m
  #    memory: 128Mi

  persistence:
    enabled: true 
    size: 5Gi

  ## Pass the plugins you want installed as a list.
  ##
  plugins: []
    # - digrich-bubblechart-panel
    # - grafana-clock-panel
    ## You can also use other plugin download URL, as long as they are valid zip files,
    ## and specify the name of the plugin after the semicolon. Like this:
    # - https://grafana.com/api/plugins/marcusolsson-json-datasource/versions/1.3.2/download;marcusolsson-json-datasource

  ## Configure grafana datasources
  ## ref: http://docs.grafana.org/administration/provisioning/#datasources
  ##
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        url: http://{{ .Release.Name }}-prometheus-server
  #      access: proxy
  #      isDefault: true
  #    - name: CloudWatch
  #      type: cloudwatch
  #      access: proxy
  #      uid: cloudwatch
  #      editable: false
  #      jsonData:
  #        authType: default
  #        defaultRegion: us-east-1
  #    deleteDatasources: []
  #    - name: Prometheus


  ## Configure grafana alerting (can be templated)
  ## ref: https://docs.grafana.com/alerting/set-up/provision-alerting-resources/file-provisioning/
  alerting: {}

  ## Configure notifiers
  ## ref: http://docs.grafana.org/administration/provisioning/#alert-notification-channels
  notifiers: {}

  ## Configure grafana dashboard providers
  ## ref: http://docs.grafana.org/administration/provisioning/#dashboards
  ##
  ## `path` must be /var/lib/grafana/dashboards/<provider_name>
  ##
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: default
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: false
          options:
            path: /var/lib/grafana/dashboards/default

  ## Configure grafana dashboard to import
  ## NOTE: To use dashboards you must also enable/configure dashboardProviders
  ## ref: https://grafana.com/dashboards
  ##
  ## dashboards per provider, use provider name as key.
  ##
  dashboards: {}

  # grafana.ini:
  #   server:
  #     domain: 

  ## Grafana's SMTP configuration
  ## NOTE: To enable, grafana.ini must be configured with smtp.enabled
  ## ref: http://docs.grafana.org/installation/configuration/#smtp
  # smtp:
  #   # `existingSecret` is a reference to an existing secret containing the smtp configuration
  #   # for Grafana.
  #   existingSecret: ""
  #   userKey: "user"
  #   passwordKey: "password"


prometheus:
  enabled: true

  server:
    name: server
    global:
      ## How frequently to scrape targets by default
      scrape_interval: 1m
      ## How long until a scrape request times out
      scrape_timeout: 10s
      ## How frequently to evaluate rules
      evaluation_interval: 1m
  
    ingress:
      enabled: false

    persistentVolume:
      enabled: true
      size: 10Gi
    
    replicaCount: 1

    resources: {}
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
    # requests:
    #   cpu: 500m
    #   memory: 512Mi

    service:
      enabled: true

      ## List of IP addresses at which the Prometheus server service is available
      ## Ref: https://kubernetes.io/docs/concepts/services-networking/service/#external-ips
      ##
      externalIPs: []

      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      servicePort: 80
      sessionAffinity: None
      type: ClusterIP
      ## externalTrafficPolicy is applicable to service with externally-facing addresses (NodePorts, ExternalIPs, and LoadBalancer IPs)
      externalTrafficPolicy: ""

  networkPolicy:
    ## Enable creation of NetworkPolicy resources.
    enabled: false

  ## alertmanager sub-chart configurable values
  ## Please see https://github.com/prometheus-community/helm-charts/tree/main/charts/alertmanager
  alertmanager:
    ## If false, alertmanager will not be installed
    enabled: false
      
loki:
  enabled: false

k8s-monitoring:
  enabled: false  
  cluster:
    name: structam-production
    kubernetesAPIService: kubernetes.default.svc.cluster.local:443

  externalServices:
    prometheus:
      host: <prometheus-hostname>:<port>
      # authMode: basic
      # basicAuth:
      #   usernameKey: username 
      #   passwordKey: password
      # secret:
      #   create: false 
      #   name: prometheus-basic-auth
      #   namespace: "{{ .Release.Namespace }}"

    loki:
      host: <loki-hostname>:<port>
      # authMode: basic
      # basicAuth:
      #   usernameKey: username 
      #   passwordKey: password
      # secret:
      #   create: false 
      #   name: loki-basic-auth
      #   namespace: "{{ .Release.Namespace }}"
    
  metrics:
    enabled: true
    autoDiscover:
      enabled: true
      # If empty, all namespaces will be monitored
      namespaces: []
      excludeNamespaces: []
    cost:
      enabled: false
    node-exporter:
      enabled: true

  logs:
    enabled: true
    pod_logs:
      enabled: true
    cluster_events:
      enabled: true
    node_events:
      enabled: true

  traces:
    enabled: false
  opencost:
    enabled: false
  kube-state-metrics:
    enabled: true
  prometheus-node-exporter:
    enabled: true
  prometheus-operator-crds:
    enabled: true
  grafana-agent: {}
  grafana-agent-logs: {}